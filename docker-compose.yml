version: '3.8'

services:
  postgresql:
    image: pgvector/pgvector:pg17
    container_name: lobe-postgres
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - lobe-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-casdoor}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2024-04-22T22-12-26Z
    container_name: lobe-minio
    ports:
      - '${MINIO_API_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    networks:
      - lobe-network
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_VOLUMES=/data
      - MINIO_BROWSER=on
      - MINIO_API_CORS_ALLOW_ORIGIN=${APP_URL}
    restart: unless-stopped
    command: >
      sh -c "
        minio server /data --address ':9000' --console-address ':9001' &
        sleep 10 &&
        mc alias set myminio http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        if ! mc ls myminio | grep -q lobe; then
          mc mb myminio/lobe &&
          mc anonymous set public myminio/lobe;
        fi &&
        if ! mc ls myminio | grep -q casdoor; then
          mc mb myminio/casdoor &&
          mc anonymous set public myminio/casdoor;
        fi &&
        wait
      "

  searxng:
    image: searxng/searxng
    container_name: lobe-searxng
    networks:
      - lobe-network
    volumes:
      - ./config/searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL:-http://searxng:8080}
      - SEARXNG_SECRET=${SEARXNG_SECRET}
    restart: unless-stopped
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID

  casdoor:
    image: casbin/casdoor:v2.13.0
    container_name: lobe-casdoor
    networks:
      - lobe-network
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - '${CASDOOR_PORT:-8000}:8000'
    environment:
      - driverName=postgres
      - dataSourceName=${CASDOOR_DB_URL:-postgres://postgres:${POSTGRES_PASSWORD}@postgresql:5432/casdoor?sslmode=disable}
      - sessionSecret=${CASDOOR_SESSION_SECRET}
    volumes:
      - ./config/casdoor/app.conf:/conf/app.conf:ro
      - ./config/casdoor/init_data.json:/init_data.json:ro
    restart: unless-stopped
    command: >
      sh -c "
        ./server --createDatabase=true
        if [ ! -f /initialized ]; then
          sleep 2
          curl -X POST 'http://localhost:8000/api/init-data' \
            -H 'Content-Type: application/json' \
            -d @/init_data.json
          touch /initialized
        fi
      "

  lobe:
    image: lobehub/lobe-chat-database
    container_name: lobe-chat
    networks:
      - lobe-network
    depends_on:
      postgresql:
        condition: service_healthy
      casdoor:
        condition: service_started
    ports:
      - '${LOBE_PORT:-3210}:3210'
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgres://postgres:${POSTGRES_PASSWORD}@postgresql:5432/lobe}

      # App Configuration
      - APP_URL=${APP_URL}
      - NEXT_PUBLIC_BASE_PATH=${NEXT_PUBLIC_BASE_PATH:-}
      - KEY_VAULTS_SECRET=${KEY_VAULTS_SECRET}

      # Authentication
      - NEXT_AUTH_SSO_PROVIDERS=${NEXT_AUTH_SSO_PROVIDERS:-casdoor}
      - NEXT_AUTH_SECRET=${NEXT_AUTH_SECRET}
      - AUTH_URL=${AUTH_URL}
      - AUTH_CASDOOR_ISSUER=${AUTH_CASDOOR_ISSUER}
      - AUTH_CASDOOR_ID=${AUTH_CASDOOR_ID}
      - AUTH_CASDOOR_SECRET=${AUTH_CASDOOR_SECRET}
      - AUTH_CASDOOR_APP_NAME=${AUTH_CASDOOR_APP_NAME:-lobechat}

      # S3 Storage
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET=${S3_BUCKET:-lobe}
      - S3_PUBLIC_DOMAIN=${S3_PUBLIC_DOMAIN}
      - S3_ENABLE_PATH_STYLE=${S3_ENABLE_PATH_STYLE:-1}

      # AI Providers (Optional)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - QWEN_API_KEY=${QWEN_API_KEY:-}
      - ZHIPU_API_KEY=${ZHIPU_API_KEY:-}

      # Search (Optional)
      - SEARXNG_QUERY_URL=${SEARXNG_QUERY_URL:-}
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: lobe-nginx
    networks:
      - lobe-network
    depends_on:
      - lobe
      - casdoor
    ports:
      - '${NGINX_HTTP_PORT:-80}:80'
      - '${NGINX_HTTPS_PORT:-443}:443'
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    profiles: ['production']

networks:
  lobe-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  minio-data:
    driver: local